// <auto-generated />
using EgweneService.Data.Local;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EgweneService.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20230312163244_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.3");

            modelBuilder.Entity("CharacterQuestPoint", b =>
                {
                    b.Property<int>("CharactersCharacterId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("QuestPointsQuestPointId")
                        .HasColumnType("INTEGER");

                    b.HasKey("CharactersCharacterId", "QuestPointsQuestPointId");

                    b.HasIndex("QuestPointsQuestPointId");

                    b.ToTable("CharacterQuestPoint");
                });

            modelBuilder.Entity("EgweneService.Data.Local.Entities.Character", b =>
                {
                    b.Property<int>("CharacterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("ObjectId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ServerId")
                        .HasColumnType("INTEGER");

                    b.HasKey("CharacterId");

                    b.HasIndex("ObjectId")
                        .IsUnique();

                    b.HasIndex("ServerId");

                    b.ToTable("Characters");
                });

            modelBuilder.Entity("EgweneService.Data.Local.Entities.Quest", b =>
                {
                    b.Property<int>("QuestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("QuestId");

                    b.ToTable("Quests");
                });

            modelBuilder.Entity("EgweneService.Data.Local.Entities.QuestPoint", b =>
                {
                    b.Property<int>("QuestPointId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AceString")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("Complete")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("QuestId")
                        .HasColumnType("INTEGER");

                    b.HasKey("QuestPointId");

                    b.HasIndex("QuestId");

                    b.ToTable("QuestPoints");
                });

            modelBuilder.Entity("EgweneService.Data.Local.Entities.Server", b =>
                {
                    b.Property<int>("ServerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasMaxLength(120)
                        .HasColumnType("TEXT");

                    b.HasKey("ServerId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Servers");
                });

            modelBuilder.Entity("CharacterQuestPoint", b =>
                {
                    b.HasOne("EgweneService.Data.Local.Entities.Character", null)
                        .WithMany()
                        .HasForeignKey("CharactersCharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EgweneService.Data.Local.Entities.QuestPoint", null)
                        .WithMany()
                        .HasForeignKey("QuestPointsQuestPointId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EgweneService.Data.Local.Entities.Character", b =>
                {
                    b.HasOne("EgweneService.Data.Local.Entities.Server", "Server")
                        .WithMany("Characters")
                        .HasForeignKey("ServerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Server");
                });

            modelBuilder.Entity("EgweneService.Data.Local.Entities.QuestPoint", b =>
                {
                    b.HasOne("EgweneService.Data.Local.Entities.Quest", "Quest")
                        .WithMany("Points")
                        .HasForeignKey("QuestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Quest");
                });

            modelBuilder.Entity("EgweneService.Data.Local.Entities.Quest", b =>
                {
                    b.Navigation("Points");
                });

            modelBuilder.Entity("EgweneService.Data.Local.Entities.Server", b =>
                {
                    b.Navigation("Characters");
                });
#pragma warning restore 612, 618
        }
    }
}
